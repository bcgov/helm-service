{{- if .Values.deployment }}
{{- $releaseName := .Release.Name }}
{{- $componentFullName := include "component.fullname" . }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "component.fullname" . }}
  labels:
    {{- include "component.labels" . | nindent 4 }}
spec:
  {{- if .Values.replicaCount }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.deploymentStrategy }}
  strategy:
    {{- toYaml .Values.deploymentStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "component.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if and .Values.vault .Values.vault.enabled }}
      annotations:
        {{- include "component.podAnnotations" . | nindent 8 }}
        {{- include "component.vaultAnnotations" . | nindent 8 }}
      {{- else }}
      annotations:
        {{- include "component.podAnnotations" . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "component.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.imagePullSecrets }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- $configmap := .Values.configmap -}}
      {{- $secrets := .Values.secret -}}
      {{- if .Values.initContainers }}
      initContainers:
      {{- range .Values.initContainers }}
        - name: {{ .name }}
          {{- if  $.Values.global.openshiftImageRegistry }}
          {{- if (contains "sha256:" .tag) }}
          image: '{{$.Values.global.openshiftImageRegistry}}/{{$.Release.Namespace}}/{{$releaseName}}-{{ .name }}:{{ trimPrefix "sha256:" tpl .tag $  }}'
          {{- else }}
          image: '{{$.Values.global.openshiftImageRegistry}}/{{$.Release.Namespace}}/{{$releaseName}}-{{ .name }}:{{ tpl .tag $ }}'
          {{- end }}
          {{- else }}
          {{- if (contains "sha256:" .tag) }}
          image: '{{ tpl .registry $ }}/{{ tpl .repository $ }}/{{ .image }}@{{ (tpl .tag $) }}'
          {{- else }}
          image: '{{ tpl .registry $ }}/{{ tpl .repository $ }}/{{ .image }}:{{ (tpl .tag $) }}'
          {{- end }}
          {{- end }}

          imagePullPolicy: {{ default "IfNotPresent" .pullPolicy }}
          {{- if .command }}
          command:
          {{- range .command }}
            - "{{tpl . $}}"
          {{- end }}
          {{- end}}
          {{- if .args }}
          args:
          {{- range .args }}
            - "{{tpl . $}}"
          {{- end }}
          {{- end }}
          {{- if .envFrom }}
          envFrom:
          {{- if .envFrom.secretRef }}
            - secretRef:
                {{- if .envFrom.secretRef.name }}
                name: {{ tpl .envFrom.secretRef.name $ }}
                {{- else }}
                name: {{ include "component.fullname" $ }}
                {{- end }}
          {{- end }}
          {{- if .envFrom.configMapRef }}
            - configMapRef:
                {{- if .envFrom.configMapRef.name }}
                name: {{ tpl .envFrom.configMapRef.name $ }}
                {{- else }}
                name: {{ include "component.fullname" $ }}
                {{- end }}
          {{- end }}
          {{- end }}
          {{- if .env }}
          env:
          {{- if .env.fromLocalConfigmap }}
          {{- range $item := .env.fromLocalConfigmap }} # picking individual elements from configmap of individual component (backend, frontend, etc)
            - name: {{$item.name}} # the env variable name
              valueFrom:
                configMapKeyRef:
                  name: {{ include "component.fullname" $ }}
                  key: {{$item.key}} # the key of configmap
          {{- end }}
          {{- end }}
          {{- if .env.fromGlobalConfigmap }}
          {{- range $item := .env.fromGlobalConfigmap }} # picking individual elements from global configmap of entire deployment set
            - name: {{$item.name}} # the env variable name
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseName }}
                  key: {{$item.key}} # the key of configmap
          {{- end }}
          {{- end }}
          {{- if .env.fromLocalSecret }}
          {{- range $item := .env.fromLocalSecret }} # picking individual elements from secret of individual component (backend, frontend, etc)
            - name: {{$item.name}} # the env variable name
              valueFrom:
                secretKeyRef:
                  {{- if $item.secretName }}
                  name: {{tpl $item.secretName $}}
                  {{- else }}
                  name: {{ include "component.fullname" $ }}
                  {{- end }}

                  key: {{$item.key}} # the key of secret
          {{- end }}
          {{- end }}
          {{- if .env.fromGlobalSecret }}
          {{- range $item := .env.fromGlobalSecret }} # picking individual elements from global secret of entire deployment set
            - name: {{$item.name}} # the env variable name
              valueFrom:
                secretKeyRef:
                  {{- if $item.secretName }}
                  name: {{tpl $item.secretName $}}
                  {{- else }}
                  name: {{ $releaseName }}
                  {{- end }}
                  key: {{$item.key}} # the key of secret
          {{- end }}
          {{- end }}

          {{- if .env.fromValues }} #this could be pure values based env like DB URLS or DB Host et
          {{- range $item := .env.fromValues }} # picking individual elements from global secret of entire deployment set
            - name: {{$item.name}} # the env variable name
              value: {{tpl  $item.value $ | quote}} # the value of env variable
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .resources}}
          {{- with .resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else }}
          resources:
            limits:
              cpu: 100m
              memory: 250Mi
            requests:
              cpu: 20m
              memory: 50Mi
          {{- end }}
          {{- if .volumeMounts }}
          volumeMounts:
          {{- tpl (toYaml .volumeMounts) $ | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- if $.Values.serviceAccount }}
      serviceAccountName: {{tpl $.Values.serviceAccount.name .}}
      {{- end }}
      containers:
      {{- range .Values.containers }}
        - name: {{ .name }}
          {{- if .securityContext }}
          securityContext:
          {{- toYaml .securityContext | nindent 12 }}
          {{- end}}
          {{- if .command }}
          command:
            {{- range .command }}
            - "{{tpl . $}}"
          {{- end }}
          {{- end}}
          {{- if .args }}
          args:
          {{- range .args }}
            - "{{tpl . $}}"
          {{- end }}
          {{- end }}
          {{- if  and (and $.Values.global.imagestreams $.Values.global.imagestreams.enabled)}}
          {{- if (contains "sha256:" .tag) }}
          image: '{{$.Values.global.openshiftImageRegistry}}/{{$.Release.Namespace}}/{{$releaseName}}-{{ .name }}:{{ trimPrefix "sha256:" tpl .tag $  }}'
          {{- else }}
          image: '{{$.Values.global.openshiftImageRegistry}}/{{$.Release.Namespace}}/{{$releaseName}}-{{ .name }}:{{ tpl .tag $ }}'
          {{- end }}
          {{- else }}
          {{- if (contains "sha256:" .tag) }}
          image: '{{ tpl .registry $ }}/{{ tpl .repository $ }}/{{ .image }}@{{ (tpl .tag $) }}'
          {{- else }}
          image: '{{ tpl .registry $ }}/{{ tpl .repository $ }}/{{ .image }}:{{ (tpl .tag $) }}'
          {{- end }}
          {{- end }}
          imagePullPolicy: {{ default "IfNotPresent" .pullPolicy }}
          {{- if .envFrom }}
          envFrom:
          {{- if .envFrom.secretRef }}
            - secretRef:
                {{- if .envFrom.secretRef.name }}
                name: {{ tpl .envFrom.secretRef.name $ }}
                {{- else }}
                name: {{ include "component.fullname" $ }}
                {{- end }}
          {{- end }}
          {{- if .envFrom.configMapRef }}
            - configMapRef:
                {{- if .envFrom.configMapRef.name }}
                name: {{ tpl .envFrom.configMapRef.name $ }}
                {{- else }}
                name: {{ include "component.fullname" $ }}
                {{- end }}
          {{- end }}
          {{- end }}
          {{- if .env }}
          env:
          {{- if .env.fromLocalConfigmap }}
          {{- range $item := .env.fromLocalConfigmap }} # picking individual elements from configmap of individual component (backend, frontend, etc)
            - name: {{$item.name}} # the env variable name
              valueFrom:
                configMapKeyRef:
                  name: {{ include "component.fullname" $ }}
                  key: {{$item.key}} # the key of configmap
          {{- end }}
          {{- end }}
          {{- if .env.fromGlobalConfigmap }}
          {{- range $item := .env.fromGlobalConfigmap }} # picking individual elements from global configmap of entire deployment set
            - name: {{$item.name}} # the env variable name
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseName }}
                  key: {{$item.key}} # the key of configmap
          {{- end }}
          {{- end }}
          {{- if .env.fromLocalSecret }}
          {{- range $item := .env.fromLocalSecret }} # picking individual elements from secret of individual component (backend, frontend, etc)
            - name: {{$item.name}} # the env variable name
              valueFrom:
                secretKeyRef:
                  {{- if $item.secretName }}
                  name: {{tpl $item.secretName $}}
                  {{- else }}
                  name: {{ include "component.fullname" $ }}
                  {{- end }}
                  key: {{$item.key}} # the key of secret
          {{- end }}
          {{- end }}
          {{- if .env.fromGlobalSecret }}
          {{- range $item := .env.fromGlobalSecret }} # picking individual elements from global secret of entire deployment set
            - name: {{$item.name}} # the env variable name
              valueFrom:
                secretKeyRef:
                  {{- if $item.secretName }}
                  name: {{tpl $item.secretName $}}
                  {{- else }}
                  name: {{ $releaseName }}
                  {{- end }}
                  key: {{$item.key}} # the key of secret
          {{- end }}
          {{- end }}
          {{- if .env.fromValues }} #this could be pure values based env like DB URLS or DB Host et
          {{- range $item := .env.fromValues }} # picking individual elements from global secret of entire deployment set
            - name: {{$item.name}} # the env variable name
              value: {{tpl  $item.value $ | quote}} # the value of env variable
          {{- end }}
          {{- end }}
          {{- end }}

          {{- if .ports}}
          {{- with .ports }}
          ports:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          {{- end }}
          {{- if .resources}}
          {{- with .resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else }}
          resources:
            limits:
              cpu: 100m
              memory: 250Mi
            requests:
              cpu: 20m
              memory: 50Mi
          {{- end }}
          {{- if .readinessProbe}}
          {{- with .readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else }}
          readinessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
          {{- end }}
          {{- if .livenessProbe}}
          {{- with .livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else }}
          livenessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
          {{- end }}
          {{- if .volumeMounts }}
          volumeMounts:
            {{- tpl (toYaml .volumeMounts) $ | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if .Values.volumes }}
      volumes:
        {{- tpl (toYaml .Values.volumes) . | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- tpl (toYaml .Values.nodeSelector) . | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- tpl (toYaml .Values.affinity) . | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- tpl (toYaml .Values.tolerations) . | nindent 8 }}
      {{- end }}

{{- end }}
